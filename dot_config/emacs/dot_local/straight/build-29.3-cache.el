
:tanat

"29.3"

#s(hash-table size 145 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("org-elpa" ("2024-10-13 23:07:35" nil (:local-repo nil :package "org-elpa" :type git)) "melpa" ("2024-10-13 23:07:35" nil (:type git :host github :repo "melpa/melpa" :build nil :package "melpa" :local-repo "melpa")) "nongnu-elpa" ("2024-10-13 23:07:35" nil (:type git :repo "https://git.savannah.gnu.org/git/emacs/nongnu.git" :local-repo "nongnu-elpa" :build nil :package "nongnu-elpa")) "gnu-elpa-mirror" ("2024-10-13 23:07:35" nil (:type git :host github :repo "emacs-straight/gnu-elpa-mirror" :build nil :package "gnu-elpa-mirror" :local-repo "gnu-elpa-mirror")) "el-get" ("2024-10-13 23:07:35" nil (:type git :host github :repo "dimitri/el-get" :build nil :files (:defaults "methods" ("recipes" "recipes/el-get.rcp") "el-get-pkg.el") :package "el-get" :local-repo "el-get")) "emacsmirror-mirror" ("2024-10-13 23:07:35" nil (:type git :host github :repo "emacs-straight/emacsmirror-mirror" :build nil :package "emacsmirror-mirror" :local-repo "emacsmirror-mirror")) "straight" ("2024-10-13 23:07:35" ("emacs") (:host github :repo "radian-software/straight.el" :branch "develop" :local-repo "straight.el" :files ("straight*.el") :package "straight" :type git)) "link-hint" ("2024-10-13 23:07:34" ("avy" "emacs") (:type git :host github :repo "noctuid/link-hint.el" :package "link-hint" :local-repo "link-hint.el")) "avy" ("2024-10-13 23:07:34" ("emacs" "cl-lib") (:type git :host github :repo "abo-abo/avy" :package "avy" :local-repo "avy")) "ob-async" ("2024-10-13 23:07:34" ("async" "org" "emacs" "dash") (:type git :host github :repo "astahlman/ob-async" :package "ob-async" :local-repo "ob-async")) "async" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "jwiegley/emacs-async" :package "async" :local-repo "emacs-async")) "org" ("2024-10-13 23:07:34" ("emacs") (:host github :repo "emacs-straight/org-mode" :files (:defaults "etc") :depth 1 :build t :pre-build (progn (with-temp-file "org-loaddefs.el") (with-temp-file "org-version.el" (let ((version (with-temp-buffer (insert-file-contents "lisp/org.el" nil 0 1024) (if (re-search-forward "^;; Version: \\([^
-]+\\)" nil t) (match-string-no-properties 1) "Unknown")))) (insert (format "(defun org-release () %S)
" version) (format "(defun org-git-version (&rest _) \"%s-??-%s\")
" version (cdr (doom-call-process "git" "rev-parse" "--short" "HEAD"))) "(provide 'org-version)
")))) :local-repo "org" :package "org" :type git)) "dash" ("2024-10-13 23:07:34" ("emacs") (:type git :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el" :package "dash" :local-repo "dash.el")) "orgit" ("2024-10-13 23:07:34" ("emacs" "compat" "magit" "org") (:type git :host github :repo "magit/orgit" :package "orgit" :local-repo "orgit")) "compat" ("2024-10-13 23:07:34" ("emacs" "seq") (:host github :repo "emacs-compat/compat" :files ("*" (:exclude ".git")) :package "compat" :type git :local-repo "compat")) "seq" ("2024-10-13 23:07:34" nil (:type git :host github :repo "emacs-straight/seq" :files ("*" (:exclude ".git")) :package "seq" :local-repo "seq")) "magit" ("2024-10-13 23:07:34" ("emacs" "compat" "dash" "magit-section" "seq" "transient" "with-editor") (:type git :files ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE" "magit-pkg.el" (:exclude "lisp/magit-section.el") "magit-pkg.el") :host github :repo "magit/magit" :package "magit" :local-repo "magit")) "magit-section" ("2024-10-13 23:07:34" ("emacs" "compat" "dash" "seq") (:files ("lisp/magit-section.el" "docs/magit-section.texi" "magit-section-pkg.el" "magit-section-pkg.el") :package "magit-section" :local-repo "magit" :type git :repo "magit/magit" :host github)) "transient" ("2024-10-13 23:07:34" ("emacs" "compat" "seq") (:type git :host github :repo "magit/transient" :package "transient" :local-repo "transient")) "with-editor" ("2024-10-13 23:07:34" ("emacs" "compat") (:type git :host github :repo "magit/with-editor" :package "with-editor" :local-repo "with-editor")) "evil-org" ("2024-10-13 23:07:34" ("emacs" "evil") (:host github :repo "doomelpa/evil-org-mode" :package "evil-org" :type git :local-repo "evil-org-mode")) "evil" ("2024-10-13 23:07:34" ("emacs" "goto-chg" "cl-lib") (:type git :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil" :package "evil" :local-repo "evil")) "goto-chg" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "emacs-evil/goto-chg" :package "goto-chg" :local-repo "goto-chg")) "org-cliplink" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "rexim/org-cliplink" :package "org-cliplink" :local-repo "org-cliplink")) "toc-org" ("2024-10-13 23:07:34" nil (:type git :host github :repo "snosov1/toc-org" :package "toc-org" :local-repo "toc-org")) "ox-clip" ("2024-10-13 23:07:34" ("org" "htmlize") (:type git :host github :repo "jkitchin/ox-clip" :package "ox-clip" :local-repo "ox-clip")) "htmlize" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "hniksic/emacs-htmlize" :package "htmlize" :local-repo "emacs-htmlize")) "org-contrib" ("2024-10-13 23:07:34" ("emacs" "org") (:host github :repo "emacsmirror/org-contrib" :files (:defaults "lisp/*.el") :package "org-contrib" :type git :local-repo "org-contrib")) "evil-markdown" ("2024-10-13 23:07:34" nil (:host github :repo "Somelauw/evil-markdown" :package "evil-markdown" :type git :local-repo "evil-markdown")) "edit-indirect" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "Fanael/edit-indirect" :package "edit-indirect" :local-repo "edit-indirect")) "markdown-toc" ("2024-10-13 23:07:34" ("s" "dash" "markdown-mode") (:type git :host github :repo "ardumont/markdown-toc" :package "markdown-toc" :local-repo "markdown-toc")) "s" ("2024-10-13 23:07:34" nil (:type git :host github :repo "magnars/s.el" :package "s" :local-repo "s.el")) "markdown-mode" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "jrblevin/markdown-mode" :package "markdown-mode" :local-repo "markdown-mode")) "buttercup" ("2024-10-13 23:07:34" ("emacs") (:type git :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup" :package "buttercup" :local-repo "emacs-buttercup")) "flycheck-cask" ("2024-10-13 23:07:34" ("emacs" "flycheck" "dash") (:type git :host github :repo "flycheck/flycheck-cask" :package "flycheck-cask" :local-repo "flycheck-cask")) "flycheck" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "flycheck/flycheck" :package "flycheck" :local-repo "flycheck")) "flycheck-package" ("2024-10-13 23:07:34" ("emacs" "flycheck" "package-lint") (:type git :host github :repo "purcell/flycheck-package" :package "flycheck-package" :local-repo "flycheck-package")) "package-lint" ("2024-10-13 23:07:34" ("emacs" "let-alist") (:type git :files (:defaults "data" (:exclude "*flymake.el") "package-lint-pkg.el") :host github :repo "purcell/package-lint" :package "package-lint" :local-repo "package-lint")) "elisp-demos" ("2024-10-13 23:07:34" ("emacs") (:type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos" :package "elisp-demos" :local-repo "elisp-demos")) "elisp-def" ("2024-10-13 23:07:34" ("dash" "f" "s" "emacs") (:type git :host github :repo "Wilfred/elisp-def" :package "elisp-def" :local-repo "elisp-def")) "f" ("2024-10-13 23:07:34" ("emacs" "s" "dash") (:type git :host github :repo "rejeep/f.el" :package "f" :local-repo "f.el")) "overseer" ("2024-10-13 23:07:34" ("emacs" "dash" "pkg-info" "f") (:type git :host github :repo "tonini/overseer.el" :package "overseer" :local-repo "overseer.el")) "pkg-info" ("2024-10-13 23:07:34" ("epl") (:type git :host github :repo "emacsorphanage/pkg-info" :package "pkg-info" :local-repo "pkg-info")) "epl" ("2024-10-13 23:07:34" ("cl-lib") (:type git :host github :repo "cask/epl" :package "epl" :local-repo "epl")) "macrostep" ("2024-10-13 23:07:34" ("cl-lib" "compat") (:type git :host github :repo "emacsorphanage/macrostep" :package "macrostep" :local-repo "macrostep")) "helpful" ("2024-10-13 23:07:34" ("emacs" "dash" "s" "f" "elisp-refs") (:type git :host github :repo "Wilfred/helpful" :package "helpful" :local-repo "helpful")) "elisp-refs" ("2024-10-13 23:07:34" ("dash" "s") (:type git :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs" :package "elisp-refs" :local-repo "elisp-refs")) "highlight-quoted" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "Fanael/highlight-quoted" :package "highlight-quoted" :local-repo "highlight-quoted")) "request" ("2024-10-13 23:07:34" ("emacs") (:type git :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request" :package "request" :local-repo "emacs-request")) "dumb-jump" ("2024-10-13 23:07:34" ("emacs" "s" "dash" "popup") (:type git :host github :repo "jacktasia/dumb-jump" :package "dumb-jump" :local-repo "dumb-jump")) "popup" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "auto-complete/popup-el" :package "popup" :local-repo "popup-el")) "eros" ("2024-10-13 23:07:34" ("emacs") (:type git :host github :repo "xiongtx/eros" :package "eros" :local-repo "eros")) "quickrun" ("2024-10-13 23:07:34" ("emacs" "ht") (:type git :host github :repo "emacsorphanage/quickrun" :package "quickrun" :local-repo "quickrun")) "ht" ("2024-10-13 23:07:34" ("dash") (:type git :host github :repo "Wilfred/ht.el" :package "ht" :local-repo "ht.el")) "flycheck-popup-tip" ("2024-10-13 23:07:34" ("flycheck" "popup" "emacs") (:type git :host github :repo "flycheck/flycheck-popup-tip" :package "flycheck-popup-tip" :local-repo "flycheck-popup-tip")) "git-modes" ("2024-10-13 23:07:34" ("emacs" "compat") (:type git :host github :repo "magit/git-modes" :package "git-modes" :local-repo "git-modes")) "git-timemachine" ("2024-10-13 23:07:34" ("emacs" "transient") (:host github :repo "emacsmirror/git-timemachine" :package "git-timemachine" :type git :local-repo "git-timemachine")) "browse-at-remote" ("2024-10-13 23:07:35" ("f" "s" "cl-lib") (:type git :host github :repo "rmuslimov/browse-at-remote" :package "browse-at-remote" :local-repo "browse-at-remote")) "vundo" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "emacs-straight/vundo" :files ("*" (:exclude ".git")) :package "vundo" :local-repo "vundo")) "undo-fu-session" ("2024-10-13 23:07:35" ("emacs") (:type git :host codeberg :repo "ideasman42/emacs-undo-fu-session" :package "undo-fu-session" :local-repo "emacs-undo-fu-session")) "undo-fu" ("2024-10-13 23:07:35" ("emacs") (:type git :host codeberg :repo "ideasman42/emacs-undo-fu" :package "undo-fu" :local-repo "emacs-undo-fu")) "diredfl" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "purcell/diredfl" :package "diredfl" :local-repo "diredfl")) "dirvish" ("2024-10-13 23:07:35" ("emacs" "transient") (:host github :repo "hlissner/dirvish" :files (:defaults "extensions/*.el" "dirvish-pkg.el") :package "dirvish" :type git :local-repo "dirvish")) "doom-snippets" ("2024-10-13 23:07:35" ("emacs" "cl-lib" "yasnippet") (:host github :repo "doomemacs/snippets" :files (:defaults "*") :package "doom-snippets" :type git :local-repo "snippets")) "yasnippet" ("2024-10-13 23:07:35" ("cl-lib" "emacs") (:type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet" :package "yasnippet" :local-repo "yasnippet")) "auto-yasnippet" ("2024-10-13 23:07:35" ("yasnippet" "emacs") (:type git :host github :repo "abo-abo/auto-yasnippet" :package "auto-yasnippet" :local-repo "auto-yasnippet")) "evil-vimish-fold" ("2024-10-13 23:07:35" ("emacs" "evil" "vimish-fold") (:type git :host github :repo "alexmurray/evil-vimish-fold" :package "evil-vimish-fold" :local-repo "evil-vimish-fold")) "vimish-fold" ("2024-10-13 23:07:35" ("emacs" "cl-lib" "f") (:type git :host github :repo "matsievskiysv/vimish-fold" :package "vimish-fold" :local-repo "vimish-fold")) "evil-collection" ("2024-10-13 23:07:35" ("emacs" "evil" "annalist") (:type git :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection" :package "evil-collection" :local-repo "evil-collection")) "annalist" ("2024-10-13 23:07:35" ("emacs" "cl-lib") (:type git :host github :repo "noctuid/annalist.el" :package "annalist" :local-repo "annalist.el")) "evil-quick-diff" ("2024-10-13 23:07:35" ("evil" "cl-lib") (:host github :repo "rgrinberg/evil-quick-diff" :package "evil-quick-diff" :type git :local-repo "evil-quick-diff")) "exato" ("2024-10-13 23:07:35" ("evil" "emacs") (:type git :host github :repo "ninrod/exato" :package "exato" :local-repo "exato")) "evil-visualstar" ("2024-10-13 23:07:35" ("evil") (:type git :host github :repo "bling/evil-visualstar" :package "evil-visualstar" :local-repo "evil-visualstar")) "evil-traces" ("2024-10-13 23:07:35" ("emacs" "evil") (:type git :host github :repo "mamapanda/evil-traces" :package "evil-traces" :local-repo "evil-traces")) "evil-textobj-anyblock" ("2024-10-13 23:07:35" ("cl-lib" "evil") (:host github :repo "willghatch/evil-textobj-anyblock" :branch "fix-inner-block" :package "evil-textobj-anyblock" :type git :local-repo "evil-textobj-anyblock")) "evil-surround" ("2024-10-13 23:07:35" ("evil") (:type git :host github :repo "emacs-evil/evil-surround" :package "evil-surround" :local-repo "evil-surround")) "evil-snipe" ("2024-10-13 23:07:35" ("emacs" "evil" "cl-lib") (:type git :host github :repo "hlissner/evil-snipe" :package "evil-snipe" :local-repo "evil-snipe")) "evil-numbers" ("2024-10-13 23:07:35" ("emacs" "evil") (:type git :host github :repo "juliapath/evil-numbers" :package "evil-numbers" :local-repo "evil-numbers")) "evil-nerd-commenter" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "redguardtoo/evil-nerd-commenter" :package "evil-nerd-commenter" :local-repo "evil-nerd-commenter")) "evil-lion" ("2024-10-13 23:07:35" ("emacs" "evil") (:type git :host github :repo "edkolev/evil-lion" :package "evil-lion" :local-repo "evil-lion")) "evil-indent-plus" ("2024-10-13 23:07:35" ("evil" "cl-lib") (:type git :host github :repo "TheBB/evil-indent-plus" :package "evil-indent-plus" :local-repo "evil-indent-plus")) "evil-exchange" ("2024-10-13 23:07:35" ("evil" "cl-lib") (:type git :host github :repo "Dewdrops/evil-exchange" :package "evil-exchange" :local-repo "evil-exchange")) "evil-escape" ("2024-10-13 23:07:35" ("emacs" "evil" "cl-lib") (:host github :repo "hlissner/evil-escape" :package "evil-escape" :type git :local-repo "evil-escape")) "evil-embrace" ("2024-10-13 23:07:35" ("emacs" "embrace" "evil-surround") (:type git :host github :repo "cute-jumper/evil-embrace.el" :package "evil-embrace" :local-repo "evil-embrace.el")) "embrace" ("2024-10-13 23:07:35" ("cl-lib" "expand-region") (:type git :host github :repo "cute-jumper/embrace.el" :package "embrace" :local-repo "embrace.el")) "expand-region" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "magnars/expand-region.el" :package "expand-region" :local-repo "expand-region.el")) "evil-easymotion" ("2024-10-13 23:07:35" ("emacs" "avy" "cl-lib") (:type git :host github :repo "PythonNut/evil-easymotion" :package "evil-easymotion" :local-repo "evil-easymotion")) "evil-args" ("2024-10-13 23:07:35" ("evil") (:type git :host github :repo "wcsmith/evil-args" :package "evil-args" :local-repo "evil-args")) "persp-mode" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "Bad-ptr/persp-mode.el" :package "persp-mode" :local-repo "persp-mode.el")) "vi-tilde-fringe" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "syl20bnr/vi-tilde-fringe" :package "vi-tilde-fringe" :local-repo "vi-tilde-fringe")) "diff-hl" ("2024-10-13 23:07:35" ("cl-lib" "emacs") (:type git :host github :repo "dgutov/diff-hl" :package "diff-hl" :local-repo "diff-hl")) "evil-goggles" ("2024-10-13 23:07:35" ("emacs" "evil") (:type git :host github :repo "edkolev/evil-goggles" :package "evil-goggles" :local-repo "evil-goggles")) "evil-anzu" ("2024-10-13 23:07:35" ("evil" "anzu") (:type git :host github :repo "emacsorphanage/evil-anzu" :package "evil-anzu" :local-repo "evil-anzu")) "anzu" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "emacsorphanage/anzu" :package "anzu" :local-repo "anzu")) "doom-modeline" ("2024-10-13 23:07:35" ("emacs" "compat" "nerd-icons" "shrink-path") (:type git :host github :repo "seagle0128/doom-modeline" :package "doom-modeline" :local-repo "doom-modeline")) "nerd-icons" ("2024-10-13 23:07:35" ("emacs") (:type git :files (:defaults "data" "nerd-icons-pkg.el") :host github :repo "rainstormstudio/nerd-icons.el" :package "nerd-icons" :local-repo "nerd-icons.el")) "shrink-path" ("2024-10-13 23:07:35" ("emacs" "s" "dash" "f") (:type git :host gitlab :repo "bennya/shrink-path.el" :package "shrink-path" :local-repo "shrink-path.el")) "hl-todo" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :host github :repo "tarsius/hl-todo" :package "hl-todo" :local-repo "hl-todo")) "solaire-mode" ("2024-10-13 23:07:35" ("emacs" "cl-lib") (:type git :host github :repo "hlissner/emacs-solaire-mode" :package "solaire-mode" :local-repo "emacs-solaire-mode")) "doom-themes" ("2024-10-13 23:07:35" ("emacs" "cl-lib") (:type git :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el" "doom-themes-pkg.el") :host github :repo "doomemacs/themes" :package "doom-themes" :local-repo "themes")) "consult-yasnippet" ("2024-10-13 23:07:35" ("emacs" "yasnippet" "consult") (:type git :host github :repo "mohkale/consult-yasnippet" :package "consult-yasnippet" :local-repo "consult-yasnippet")) "consult" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :host github :repo "minad/consult" :package "consult" :local-repo "consult")) "wgrep" ("2024-10-13 23:07:35" ("emacs") (:type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep" :package "wgrep" :local-repo "Emacs-wgrep")) "marginalia" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :host github :repo "minad/marginalia" :package "marginalia" :local-repo "marginalia")) "embark-consult" ("2024-10-13 23:07:35" ("emacs" "compat" "embark" "consult") (:files ("embark-consult.el" "embark-consult-pkg.el") :package "embark-consult" :local-repo "embark" :type git :repo "oantolin/embark" :host github)) "embark" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :files ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el") :host github :repo "oantolin/embark" :package "embark" :local-repo "embark")) "consult-flycheck" ("2024-10-13 23:07:35" ("emacs" "consult" "flycheck") (:type git :host github :repo "minad/consult-flycheck" :package "consult-flycheck" :local-repo "consult-flycheck")) "consult-dir" ("2024-10-13 23:07:35" ("emacs" "consult") (:type git :host github :repo "karthink/consult-dir" :package "consult-dir" :local-repo "consult-dir")) "orderless" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :host github :repo "oantolin/orderless" :package "orderless" :local-repo "orderless")) "vertico" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :files (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host github :repo "minad/vertico" :package "vertico" :local-repo "vertico")) "yasnippet-capf" ("2024-10-13 23:07:35" ("emacs" "yasnippet") (:type git :host github :repo "elken/yasnippet-capf" :package "yasnippet-capf" :local-repo "yasnippet-capf")) "cape" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :host github :repo "minad/cape" :package "cape" :local-repo "cape")) "corfu" ("2024-10-13 23:07:35" ("emacs" "compat") (:type git :files (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host github :repo "minad/corfu" :package "corfu" :local-repo "corfu")) "which-key" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "justbur/emacs-which-key" :package "which-key" :local-repo "emacs-which-key")) "general" ("2024-10-13 23:07:35" ("emacs" "cl-lib") (:type git :host github :repo "noctuid/general.el" :package "general" :local-repo "general.el")) "project" ("2024-10-13 23:07:35" ("emacs" "xref") (:type git :host github :repo "emacs-straight/project" :files ("*" (:exclude ".git")) :package "project" :local-repo "project")) "xref" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "emacs-straight/xref" :files ("*" (:exclude ".git")) :package "xref" :local-repo "xref")) "projectile" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "bbatsov/projectile" :package "projectile" :local-repo "projectile")) "ws-butler" ("2024-10-13 23:07:35" nil (:type git :host github :repo "lewang/ws-butler" :package "ws-butler" :local-repo "ws-butler")) "smartparens" ("2024-10-13 23:07:35" ("dash" "cl-lib") (:type git :host github :repo "Fuco1/smartparens" :package "smartparens" :local-repo "smartparens")) "dtrt-indent" ("2024-10-13 23:07:35" nil (:type git :host github :repo "jscheid/dtrt-indent" :package "dtrt-indent" :local-repo "dtrt-indent")) "better-jumper" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "gilbertw1/better-jumper" :package "better-jumper" :local-repo "better-jumper")) "restart-emacs" ("2024-10-13 23:07:35" nil (:type git :host github :repo "iqbalansari/restart-emacs" :package "restart-emacs" :local-repo "restart-emacs")) "rainbow-delimiters" ("2024-10-13 23:07:35" nil (:type git :host github :repo "Fanael/rainbow-delimiters" :package "rainbow-delimiters" :local-repo "rainbow-delimiters")) "highlight-numbers" ("2024-10-13 23:07:35" ("emacs" "parent-mode") (:type git :host github :repo "Fanael/highlight-numbers" :package "highlight-numbers" :local-repo "highlight-numbers")) "parent-mode" ("2024-10-13 23:07:35" nil (:type git :host github :repo "Fanael/parent-mode" :package "parent-mode" :local-repo "parent-mode")) "hide-mode-line" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "hlissner/emacs-hide-mode-line" :package "hide-mode-line" :local-repo "emacs-hide-mode-line")) "gcmh" ("2024-10-13 23:07:35" ("emacs") (:type git :host gitlab :repo "koral/gcmh" :package "gcmh" :local-repo "gcmh")) "auto-minor-mode" ("2024-10-13 23:07:35" ("emacs") (:type git :host github :repo "joewreschnig/auto-minor-mode" :package "auto-minor-mode" :local-repo "auto-minor-mode")) "use-package" ("2024-10-13 23:07:35" ("emacs" "bind-key") (:type git :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package" :package "use-package" :local-repo "use-package")) "bind-key" ("2024-10-13 23:07:35" ("emacs") (:files ("bind-key.el" "bind-key-pkg.el") :package "bind-key" :local-repo "use-package" :type git :repo "jwiegley/use-package" :host github))))

#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ())

#s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data (org-elpa #s(hash-table size 145 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 15 "use-package" nil "auto-minor-mode" nil "compat" nil "gcmh" nil "straight" nil "nerd-icons" nil "hide-mode-line" nil "highlight-numbers" nil "rainbow-delimiters" nil "restart-emacs" nil "better-jumper" nil "dtrt-indent" nil "smartparens" nil "ws-butler" nil "projectile" nil "project" nil "general" nil "which-key" nil "corfu" nil "cape" nil "yasnippet-capf" nil "vertico" nil "orderless" nil "consult" nil "consult-dir" nil "consult-flycheck" nil "embark" nil "embark-consult" nil "marginalia" nil "wgrep" nil "consult-yasnippet" nil "doom-themes" nil "solaire-mode" nil "hl-todo" nil "doom-modeline" nil "anzu" nil "evil-anzu" nil "evil-goggles" nil "diff-hl" nil "vi-tilde-fringe" nil "persp-mode" nil "evil" nil "evil-args" nil "evil-easymotion" nil "evil-embrace" nil "evil-escape" nil "evil-exchange" nil "evil-indent-plus" nil "evil-lion" nil "evil-nerd-commenter" nil "evil-numbers" nil "evil-snipe" nil "evil-surround" nil "evil-textobj-anyblock" nil "evil-traces" nil "evil-visualstar" nil "exato" nil "evil-quick-diff" nil "evil-collection" nil "yasnippet" nil "vimish-fold" nil "evil-vimish-fold" nil "auto-yasnippet" nil "doom-snippets" nil "dirvish" nil "diredfl" nil "undo-fu" nil "undo-fu-session" nil "vundo" nil "browse-at-remote" nil "git-timemachine" nil "git-modes" nil "flycheck" nil "flycheck-popup-tip" nil "quickrun" nil "eros" nil "dumb-jump" nil "request" nil "magit" nil "highlight-quoted" nil "helpful" nil "macrostep" nil "overseer" nil "elisp-def" nil "elisp-demos" nil "flycheck-package" nil "flycheck-cask" nil "buttercup" nil "markdown-mode" nil "markdown-toc" nil "edit-indirect" nil "evil-markdown" nil "org" (org :type git :repo "https://git.savannah.gnu.org/git/emacs/org-mode.git" :local-repo "org" :depth full :pre-build (straight-recipes-org-elpa--build) :build (:not autoloads) :files (:defaults "lisp/*.el" ("etc/styles/" "etc/styles/*"))) "org-contrib" (org-contrib :type git :includes (ob-csharp ob-eukleides ob-fomus ob-julia ob-mathomatic ob-oz ob-stata ob-tcl ob-vbnet ol-bookmark ol-elisp-symbol ol-git-link ol-man ol-mew ol-vm ol-wl org-annotate-file org-bibtex-extras org-checklist org-choose org-collector org-contribdir org-depend org-effectiveness org-eldoc org-eval org-eval-light org-expiry org-interactive-query org-invoice org-learn org-license org-mac-iCal org-mairix org-panel org-registry org-screen org-screenshot org-secretary org-static-mathjax org-sudoku orgtbl-sqlinsert org-toc org-track org-wikinodes ox-bibtex ox-confluence ox-deck ox-extra ox-freemind ox-groff ox-koma-letter ox-s5 ox-taskjuggler) :repo "https://git.sr.ht/~bzg/org-contrib" :files (:defaults "lisp/*.el")) "avy" nil "htmlize" nil "ox-clip" nil "toc-org" nil "org-cliplink" nil "evil-org" nil "orgit" nil "ob-async" nil "link-hint" nil "cl-lib" nil "async" nil "dash" nil "seq" nil "magit-section" nil "transient" nil "with-editor" nil "goto-chg" nil "s" nil "package-lint" nil "f" nil "pkg-info" nil "epl" nil "elisp-refs" nil "popup" nil "ht" nil "annalist" nil "embrace" nil "expand-region" nil "shrink-path" nil "xref" nil "parent-mode" nil "bind-key" nil "melpa" nil "nongnu-elpa" nil "gnu-elpa-mirror" nil "el-get" nil "emacsmirror-mirror" nil)) melpa #s(hash-table size 145 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "use-package" (use-package :type git :files (:defaults (:exclude "bind-key.el" "bind-chord.el" "use-package-chords.el" "use-package-ensure-system-package.el") "use-package-pkg.el") :host github :repo "jwiegley/use-package") "auto-minor-mode" (auto-minor-mode :type git :host github :repo "joewreschnig/auto-minor-mode") "compat" nil "gcmh" (gcmh :type git :host gitlab :repo "koral/gcmh") "straight" nil "nerd-icons" (nerd-icons :type git :files (:defaults "data" "nerd-icons-pkg.el") :host github :repo "rainstormstudio/nerd-icons.el") "hide-mode-line" (hide-mode-line :type git :host github :repo "hlissner/emacs-hide-mode-line") "highlight-numbers" (highlight-numbers :type git :host github :repo "Fanael/highlight-numbers") "rainbow-delimiters" (rainbow-delimiters :type git :host github :repo "Fanael/rainbow-delimiters") "restart-emacs" (restart-emacs :type git :host github :repo "iqbalansari/restart-emacs") "better-jumper" (better-jumper :type git :host github :repo "gilbertw1/better-jumper") "dtrt-indent" (dtrt-indent :type git :host github :repo "jscheid/dtrt-indent") "smartparens" (smartparens :type git :host github :repo "Fuco1/smartparens") "ws-butler" (ws-butler :type git :host github :repo "lewang/ws-butler") "projectile" (projectile :type git :host github :repo "bbatsov/projectile") "project" nil "general" (general :type git :host github :repo "noctuid/general.el") "which-key" (which-key :type git :host github :repo "justbur/emacs-which-key") "corfu" (corfu :type git :files (:defaults "extensions/corfu-*.el" "corfu-pkg.el") :host github :repo "minad/corfu") "cape" (cape :type git :host github :repo "minad/cape") "yasnippet-capf" (yasnippet-capf :type git :host github :repo "elken/yasnippet-capf") "vertico" (vertico :type git :files (:defaults "extensions/vertico-*.el" "vertico-pkg.el") :host github :repo "minad/vertico") "orderless" (orderless :type git :host github :repo "oantolin/orderless") "consult" (consult :type git :host github :repo "minad/consult") "consult-dir" (consult-dir :type git :host github :repo "karthink/consult-dir") "consult-flycheck" (consult-flycheck :type git :host github :repo "minad/consult-flycheck") "embark" (embark :type git :files ("embark.el" "embark-org.el" "embark.texi" "embark-pkg.el") :host github :repo "oantolin/embark") "embark-consult" (embark-consult :type git :files ("embark-consult.el" "embark-consult-pkg.el") :host github :repo "oantolin/embark") "marginalia" (marginalia :type git :host github :repo "minad/marginalia") "wgrep" (wgrep :type git :files ("wgrep.el" "wgrep-pkg.el") :host github :repo "mhayashi1120/Emacs-wgrep") "consult-yasnippet" (consult-yasnippet :type git :host github :repo "mohkale/consult-yasnippet") "doom-themes" (doom-themes :type git :files (:defaults "themes/*.el" "themes/*/*.el" "extensions/*.el" "doom-themes-pkg.el") :host github :repo "doomemacs/themes") "solaire-mode" (solaire-mode :type git :host github :repo "hlissner/emacs-solaire-mode") "hl-todo" (hl-todo :type git :host github :repo "tarsius/hl-todo") "doom-modeline" (doom-modeline :type git :host github :repo "seagle0128/doom-modeline") "anzu" (anzu :type git :host github :repo "emacsorphanage/anzu") "evil-anzu" (evil-anzu :type git :host github :repo "emacsorphanage/evil-anzu") "evil-goggles" (evil-goggles :type git :host github :repo "edkolev/evil-goggles") "diff-hl" (diff-hl :type git :host github :repo "dgutov/diff-hl") "vi-tilde-fringe" (vi-tilde-fringe :type git :host github :repo "syl20bnr/vi-tilde-fringe") "persp-mode" (persp-mode :type git :host github :repo "Bad-ptr/persp-mode.el") "evil" (evil :type git :files (:defaults "doc/build/texinfo/evil.texi" (:exclude "evil-test-helpers.el") "evil-pkg.el") :host github :repo "emacs-evil/evil") "evil-args" (evil-args :type git :host github :repo "wcsmith/evil-args") "evil-easymotion" (evil-easymotion :type git :host github :repo "PythonNut/evil-easymotion") "evil-embrace" (evil-embrace :type git :host github :repo "cute-jumper/evil-embrace.el") "evil-escape" (evil-escape :type git :host github :repo "emacsorphanage/evil-escape") "evil-exchange" (evil-exchange :type git :host github :repo "Dewdrops/evil-exchange") "evil-indent-plus" (evil-indent-plus :type git :host github :repo "TheBB/evil-indent-plus") "evil-lion" (evil-lion :type git :host github :repo "edkolev/evil-lion") "evil-nerd-commenter" (evil-nerd-commenter :type git :host github :repo "redguardtoo/evil-nerd-commenter") "evil-numbers" (evil-numbers :type git :host github :repo "juliapath/evil-numbers") "evil-snipe" (evil-snipe :type git :host github :repo "hlissner/evil-snipe") "evil-surround" (evil-surround :type git :host github :repo "emacs-evil/evil-surround") "evil-textobj-anyblock" (evil-textobj-anyblock :type git :host github :repo "noctuid/evil-textobj-anyblock") "evil-traces" (evil-traces :type git :host github :repo "mamapanda/evil-traces") "evil-visualstar" (evil-visualstar :type git :host github :repo "bling/evil-visualstar") "exato" (exato :type git :host github :repo "ninrod/exato") "evil-quick-diff" nil "evil-collection" (evil-collection :type git :files (:defaults "modes" "evil-collection-pkg.el") :host github :repo "emacs-evil/evil-collection") "yasnippet" (yasnippet :type git :files ("yasnippet.el" "snippets" "yasnippet-pkg.el") :host github :repo "joaotavora/yasnippet") "vimish-fold" (vimish-fold :type git :host github :repo "matsievskiysv/vimish-fold") "evil-vimish-fold" (evil-vimish-fold :type git :host github :repo "alexmurray/evil-vimish-fold") "auto-yasnippet" (auto-yasnippet :type git :host github :repo "abo-abo/auto-yasnippet") "doom-snippets" nil "dirvish" (dirvish :type git :files (:defaults "extensions/*.el" "dirvish-pkg.el") :host github :repo "alexluigit/dirvish") "diredfl" (diredfl :type git :host github :repo "purcell/diredfl") "undo-fu" (undo-fu :type git :host codeberg :repo "ideasman42/emacs-undo-fu") "undo-fu-session" (undo-fu-session :type git :host codeberg :repo "ideasman42/emacs-undo-fu-session") "vundo" nil "browse-at-remote" (browse-at-remote :type git :host github :repo "rmuslimov/browse-at-remote") "git-timemachine" (git-timemachine :type git :host codeberg :repo "pidu/git-timemachine") "git-modes" (git-modes :type git :host github :repo "magit/git-modes") "flycheck" (flycheck :type git :host github :repo "flycheck/flycheck") "flycheck-popup-tip" (flycheck-popup-tip :type git :host github :repo "flycheck/flycheck-popup-tip") "quickrun" (quickrun :type git :host github :repo "emacsorphanage/quickrun") "eros" (eros :type git :host github :repo "xiongtx/eros") "dumb-jump" (dumb-jump :type git :host github :repo "jacktasia/dumb-jump") "request" (request :type git :files ("request.el" "request-pkg.el") :host github :repo "tkf/emacs-request") "magit" (magit :type git :files ("lisp/magit*.el" "lisp/git-*.el" "docs/magit.texi" "docs/AUTHORS.md" "LICENSE" "magit-pkg.el" (:exclude "lisp/magit-section.el") "magit-pkg.el") :host github :repo "magit/magit") "highlight-quoted" (highlight-quoted :type git :host github :repo "Fanael/highlight-quoted") "helpful" (helpful :type git :host github :repo "Wilfred/helpful") "macrostep" (macrostep :type git :host github :repo "emacsorphanage/macrostep") "overseer" (overseer :type git :host github :repo "tonini/overseer.el") "elisp-def" (elisp-def :type git :host github :repo "Wilfred/elisp-def") "elisp-demos" (elisp-demos :type git :files (:defaults "*.org" "elisp-demos-pkg.el") :host github :repo "xuchunyang/elisp-demos") "flycheck-package" (flycheck-package :type git :host github :repo "purcell/flycheck-package") "flycheck-cask" (flycheck-cask :type git :host github :repo "flycheck/flycheck-cask") "buttercup" (buttercup :type git :files (:defaults "bin" "buttercup-pkg.el") :host github :repo "jorgenschaefer/emacs-buttercup") "markdown-mode" (markdown-mode :type git :host github :repo "jrblevin/markdown-mode") "markdown-toc" (markdown-toc :type git :host github :repo "ardumont/markdown-toc") "edit-indirect" (edit-indirect :type git :host github :repo "Fanael/edit-indirect") "evil-markdown" nil "avy" (avy :type git :host github :repo "abo-abo/avy") "htmlize" (htmlize :type git :host github :repo "hniksic/emacs-htmlize") "ox-clip" (ox-clip :type git :host github :repo "jkitchin/ox-clip") "toc-org" (toc-org :type git :host github :repo "snosov1/toc-org") "org-cliplink" (org-cliplink :type git :host github :repo "rexim/org-cliplink") "evil-org" (evil-org :type git :host github :repo "Somelauw/evil-org-mode") "orgit" (orgit :type git :host github :repo "magit/orgit") "ob-async" (ob-async :type git :host github :repo "astahlman/ob-async") "link-hint" (link-hint :type git :host github :repo "noctuid/link-hint.el") "cl-lib" nil "async" (async :type git :host github :repo "jwiegley/emacs-async") "dash" (dash :type git :files ("dash.el" "dash.texi" "dash-pkg.el") :host github :repo "magnars/dash.el") "seq" nil "magit-section" (magit-section :type git :files ("lisp/magit-section.el" "docs/magit-section.texi" "magit-section-pkg.el" "magit-section-pkg.el") :host github :repo "magit/magit") "transient" (transient :type git :host github :repo "magit/transient") "with-editor" (with-editor :type git :host github :repo "magit/with-editor") "goto-chg" (goto-chg :type git :host github :repo "emacs-evil/goto-chg") "s" (s :type git :host github :repo "magnars/s.el") "package-lint" (package-lint :type git :files (:defaults "data" (:exclude "*flymake.el") "package-lint-pkg.el") :host github :repo "purcell/package-lint") "f" (f :type git :host github :repo "rejeep/f.el") "pkg-info" (pkg-info :type git :host github :repo "emacsorphanage/pkg-info") "epl" (epl :type git :host github :repo "cask/epl") "elisp-refs" (elisp-refs :type git :files (:defaults (:exclude "elisp-refs-bench.el") "elisp-refs-pkg.el") :host github :repo "Wilfred/elisp-refs") "popup" (popup :type git :host github :repo "auto-complete/popup-el") "ht" (ht :type git :host github :repo "Wilfred/ht.el") "annalist" (annalist :type git :host github :repo "noctuid/annalist.el") "embrace" (embrace :type git :host github :repo "cute-jumper/embrace.el") "expand-region" (expand-region :type git :host github :repo "magnars/expand-region.el") "shrink-path" (shrink-path :type git :host gitlab :repo "bennya/shrink-path.el") "xref" nil "parent-mode" (parent-mode :type git :host github :repo "Fanael/parent-mode") "bind-key" (bind-key :type git :files ("bind-key.el" "bind-key-pkg.el") :host github :repo "jwiegley/use-package") "nongnu-elpa" nil "gnu-elpa-mirror" nil "el-get" (el-get :type git :files (:defaults "methods" ("recipes" "recipes/el-get.rcp") "el-get-pkg.el") :host github :repo "dimitri/el-get") "emacsmirror-mirror" nil)) nongnu-elpa #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 4 "compat" nil "straight" nil "project" nil "evil-quick-diff" nil "doom-snippets" nil "vundo" nil "evil-markdown" nil "cl-lib" nil "seq" nil "xref" nil "gnu-elpa-mirror" nil "emacsmirror-mirror" nil)) gnu-elpa-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 3 "compat" (compat :type git :host github :repo "emacs-straight/compat" :files ("*" (:exclude ".git"))) "straight" nil "project" (project :type git :host github :repo "emacs-straight/project" :files ("*" (:exclude ".git"))) "evil-quick-diff" nil "doom-snippets" nil "vundo" (vundo :type git :host github :repo "emacs-straight/vundo" :files ("*" (:exclude ".git"))) "evil-markdown" nil "cl-lib" nil "seq" (seq :type git :host github :repo "emacs-straight/seq" :files ("*" (:exclude ".git"))) "xref" (xref :type git :host github :repo "emacs-straight/xref" :files ("*" (:exclude ".git"))) "emacsmirror-mirror" nil)) el-get #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "straight" nil "evil-quick-diff" nil "doom-snippets" nil "evil-markdown" nil "cl-lib" nil "emacsmirror-mirror" nil)) emacsmirror-mirror #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data (version 2 "straight" (straight :type git :host github :repo "emacsmirror/straight") "evil-quick-diff" nil "doom-snippets" nil "evil-markdown" nil "cl-lib" nil))))

("bind-key" "parent-mode" "xref" "shrink-path" "expand-region" "embrace" "annalist" "ht" "popup" "elisp-refs" "epl" "pkg-info" "f" "let-alist" "package-lint" "s" "goto-chg" "with-editor" "transient" "magit-section" "seq" "dash" "async" "cl-lib" "emacs" "link-hint" "ob-async" "orgit" "evil-org" "org-cliplink" "toc-org" "ox-clip" "htmlize" "avy" "org-contrib" "org" "evil-markdown" "edit-indirect" "markdown-toc" "markdown-mode" "buttercup" "flycheck-cask" "flycheck-package" "elisp-demos" "elisp-def" "overseer" "macrostep" "helpful" "highlight-quoted" "magit" "request" "dumb-jump" "eros" "quickrun" "flycheck-popup-tip" "flycheck" "git-modes" "git-timemachine" "browse-at-remote" "vundo" "undo-fu-session" "undo-fu" "diredfl" "dirvish" "doom-snippets" "auto-yasnippet" "evil-vimish-fold" "vimish-fold" "yasnippet" "evil-collection" "evil-quick-diff" "exato" "evil-visualstar" "evil-traces" "evil-textobj-anyblock" "evil-surround" "evil-snipe" "evil-numbers" "evil-nerd-commenter" "evil-lion" "evil-indent-plus" "evil-exchange" "evil-escape" "evil-embrace" "evil-easymotion" "evil-args" "evil" "persp-mode" "vi-tilde-fringe" "diff-hl" "evil-goggles" "evil-anzu" "anzu" "doom-modeline" "hl-todo" "solaire-mode" "doom-themes" "consult-yasnippet" "wgrep" "marginalia" "embark-consult" "embark" "consult-flycheck" "consult-dir" "consult" "orderless" "vertico" "yasnippet-capf" "cape" "corfu" "which-key" "general" "project" "projectile" "ws-butler" "smartparens" "dtrt-indent" "better-jumper" "restart-emacs" "rainbow-delimiters" "highlight-numbers" "hide-mode-line" "nerd-icons" "gcmh" "compat" "auto-minor-mode" "use-package" "straight" "emacsmirror-mirror" "el-get" "gnu-elpa-mirror" "nongnu-elpa" "melpa" "org-elpa")

t
